<?php
/**
 * Monitor de Conex√£o com Banco de Dados
 * Sistema Bichos do Bairro
 * 
 * Este script monitora a estabilidade da conex√£o e executa testes
 */

// Configurar exibi√ß√£o de erros
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

echo "<h1>üîç Monitor de Conex√£o - Sistema Bichos do Bairro</h1>";
echo "<p><strong>Data:</strong> " . date('d/m/Y H:i:s') . "</p>";

// Carregar configura√ß√µes
require_once '../src/Config.php';
Config::load();

// Carregar conex√£o
require_once '../src/db.php';

// ========================================
// 1. TESTE DE CONEX√ÉO B√ÅSICA
// ========================================

echo "<h2>1. üîó Teste de Conex√£o B√°sica</h2>";

try {
    $pdo = getDb();
    if ($pdo) {
        echo "<p style='color: green;'>‚úÖ Conex√£o estabelecida com sucesso</p>";
        
        // Testar query simples
        $stmt = $pdo->query('SELECT 1 as test');
        $result = $stmt->fetch();
        if ($result && $result['test'] == 1) {
            echo "<p style='color: green;'>‚úÖ Query de teste executada com sucesso</p>";
        } else {
            echo "<p style='color: red;'>‚ùå Query de teste falhou</p>";
        }
        
    } else {
        echo "<p style='color: red;'>‚ùå Falha na conex√£o</p>";
    }
} catch (Exception $e) {
    echo "<p style='color: red;'>‚ùå Erro na conex√£o: " . $e->getMessage() . "</p>";
}

// ========================================
// 2. TESTE DE RECONEX√ÉO
// ========================================

echo "<h2>2. üîÑ Teste de Reconex√£o</h2>";

try {
    // For√ßar nova conex√£o
    global $pdo;
    $pdo = null;
    
    $pdo = getDb();
    if ($pdo) {
        echo "<p style='color: green;'>‚úÖ Reconex√£o bem-sucedida</p>";
        
        // Testar novamente
        $stmt = $pdo->query('SELECT NOW() as hora_atual');
        $result = $stmt->fetch();
        echo "<p style='color: blue;'>‚ÑπÔ∏è Hora atual do servidor: " . $result['hora_atual'] . "</p>";
        
    } else {
        echo "<p style='color: red;'>‚ùå Falha na reconex√£o</p>";
    }
} catch (Exception $e) {
    echo "<p style='color: red;'>‚ùå Erro na reconex√£o: " . $e->getMessage() . "</p>";
}

// ========================================
// 3. TESTE DE FUN√á√ïES HELPER
// ========================================

echo "<h2>3. üõ†Ô∏è Teste de Fun√ß√µes Helper</h2>";

try {
    // Testar fetchOne
    $result = fetchOne('SELECT COUNT(*) as total FROM clientes');
    if ($result) {
        echo "<p style='color: green;'>‚úÖ fetchOne() funcionando - Total de clientes: " . $result['total'] . "</p>";
    } else {
        echo "<p style='color: red;'>‚ùå fetchOne() falhou</p>";
    }
    
    // Testar fetchAll
    $result = fetchAll('SELECT id, nome FROM clientes LIMIT 5');
    if ($result) {
        echo "<p style='color: green;'>‚úÖ fetchAll() funcionando - " . count($result) . " clientes retornados</p>";
    } else {
        echo "<p style='color: red;'>‚ùå fetchAll() falhou</p>";
    }
    
    // Testar countRecords
    $total = countRecords('pets');
    echo "<p style='color: green;'>‚úÖ countRecords() funcionando - Total de pets: $total</p>";
    
    // Testar tableExists
    $existe = tableExists('agendamentos');
    if ($existe) {
        echo "<p style='color: green;'>‚úÖ tableExists() funcionando - Tabela agendamentos existe</p>";
    } else {
        echo "<p style='color: red;'>‚ùå tableExists() falhou ou tabela n√£o existe</p>";
    }
    
} catch (Exception $e) {
    echo "<p style='color: red;'>‚ùå Erro nos testes de fun√ß√µes helper: " . $e->getMessage() . "</p>";
}

// ========================================
// 4. TESTE DE CLASSES
// ========================================

echo "<h2>4. üì¶ Teste de Classes</h2>";

try {
    // Carregar classes
    require_once '../src/BaseModel.php';
    require_once '../src/Cliente.php';
    require_once '../src/Pet.php';
    require_once '../src/Agendamento.php';
    
    // Testar Cliente
    $clientes = Cliente::listarTodos();
    echo "<p style='color: green;'>‚úÖ Cliente::listarTodos() - " . count($clientes) . " registros</p>";
    
    // Testar Pet
    $pets = Pet::listarTodos();
    echo "<p style='color: green;'>‚úÖ Pet::listarTodos() - " . count($pets) . " registros</p>";
    
    // Testar Agendamento
    $agendamentos = Agendamento::listarTodos();
    echo "<p style='color: green;'>‚úÖ Agendamento::listarTodos() - " . count($agendamentos) . " registros</p>";
    
    // Testar m√©todos espec√≠ficos
    if (method_exists('Cliente', 'buscarTelefones')) {
        echo "<p style='color: green;'>‚úÖ Cliente::buscarTelefones() existe</p>";
    } else {
        echo "<p style='color: red;'>‚ùå Cliente::buscarTelefones() n√£o existe</p>";
    }
    
    if (method_exists('Pet', 'buscarPorCliente')) {
        echo "<p style='color: green;'>‚úÖ Pet::buscarPorCliente() existe</p>";
    } else {
        echo "<p style='color: red;'>‚ùå Pet::buscarPorCliente() n√£o existe</p>";
    }
    
    if (method_exists('Agendamento', 'deletar')) {
        echo "<p style='color: green;'>‚úÖ Agendamento::deletar() existe</p>";
    } else {
        echo "<p style='color: red;'>‚ùå Agendamento::deletar() n√£o existe</p>";
    }
    
} catch (Exception $e) {
    echo "<p style='color: red;'>‚ùå Erro nos testes de classes: " . $e->getMessage() . "</p>";
}

// ========================================
// 5. TESTE DE PERFORMANCE
// ========================================

echo "<h2>5. ‚ö° Teste de Performance</h2>";

try {
    $inicio = microtime(true);
    
    // Executar v√°rias queries
    for ($i = 0; $i < 10; $i++) {
        fetchOne('SELECT COUNT(*) as total FROM clientes');
        fetchOne('SELECT COUNT(*) as total FROM pets');
        fetchOne('SELECT COUNT(*) as total FROM agendamentos');
    }
    
    $fim = microtime(true);
    $tempo = round(($fim - $inicio) * 1000, 2);
    
    echo "<p style='color: green;'>‚úÖ 30 queries executadas em {$tempo}ms</p>";
    
    if ($tempo < 1000) {
        echo "<p style='color: green;'>‚úÖ Performance excelente</p>";
    } elseif ($tempo < 3000) {
        echo "<p style='color: orange;'>‚ö†Ô∏è Performance aceit√°vel</p>";
    } else {
        echo "<p style='color: red;'>‚ùå Performance lenta</p>";
    }
    
} catch (Exception $e) {
    echo "<p style='color: red;'>‚ùå Erro no teste de performance: " . $e->getMessage() . "</p>";
}

// ========================================
// 6. INFORMA√á√ïES DO SISTEMA
// ========================================

echo "<h2>6. ‚ÑπÔ∏è Informa√ß√µes do Sistema</h2>";

echo "<table border='1' style='border-collapse: collapse; width: 100%;'>";
echo "<tr><th>Item</th><th>Valor</th></tr>";

// Informa√ß√µes do PHP
echo "<tr><td>Vers√£o do PHP</td><td>" . phpversion() . "</td></tr>";
echo "<tr><td>Extens√£o PDO</td><td>" . (extension_loaded('pdo') ? '‚úÖ Carregada' : '‚ùå N√£o carregada') . "</td></tr>";
echo "<tr><td>Extens√£o PDO MySQL</td><td>" . (extension_loaded('pdo_mysql') ? '‚úÖ Carregada' : '‚ùå N√£o carregada') . "</td></tr>";

// Informa√ß√µes do banco
try {
    $pdo = getDb();
    if ($pdo) {
        $stmt = $pdo->query('SELECT VERSION() as version');
        $result = $stmt->fetch();
        echo "<tr><td>Vers√£o do MySQL</td><td>" . $result['version'] . "</td></tr>";
        
        $stmt = $pdo->query('SELECT @@max_connections as max_conn');
        $result = $stmt->fetch();
        echo "<tr><td>M√°ximo de conex√µes</td><td>" . $result['max_conn'] . "</td></tr>";
        
        $stmt = $pdo->query('SHOW VARIABLES LIKE "wait_timeout"');
        $result = $stmt->fetch();
        echo "<tr><td>Timeout de conex√£o</td><td>" . $result['Value'] . " segundos</td></tr>";
    }
} catch (Exception $e) {
    echo "<tr><td>Informa√ß√µes do banco</td><td>‚ùå Erro: " . $e->getMessage() . "</td></tr>";
}

// Informa√ß√µes da aplica√ß√£o
echo "<tr><td>Ambiente</td><td>" . Config::get('APP_ENV') . "</td></tr>";
echo "<tr><td>Debug</td><td>" . (Config::isDebug() ? 'Ativo' : 'Inativo') . "</td></tr>";
echo "<tr><td>Timezone</td><td>" . Config::get('APP_TIMEZONE') . "</td></tr>";

echo "</table>";

// ========================================
// 7. RECOMENDA√á√ïES
// ========================================

echo "<h2>7. üìã Recomenda√ß√µes</h2>";

echo "<ul>";
echo "<li>‚úÖ Execute este monitor regularmente para verificar a sa√∫de da conex√£o</li>";
echo "<li>‚úÖ Monitore os logs em logs/error.log</li>";
echo "<li>‚úÖ Configure alertas se a performance ficar lenta</li>";
echo "<li>‚úÖ Fa√ßa backup regular do banco de dados</li>";
echo "<li>‚úÖ Mantenha o sistema atualizado</li>";
echo "</ul>";

echo "<h3>üîó Links √öteis</h3>";
echo "<p><a href='corrigir-sistema-completo.php'>Corre√ß√£o Completa</a> | <a href='dashboard.php'>Dashboard</a> | <a href='teste-sistema.php'>Teste do Sistema</a></p>";

echo "<hr>";
echo "<p><strong>Monitor executado em:</strong> " . date('d/m/Y H:i:s') . "</p>";
echo "<p><strong>Vers√£o do sistema:</strong> " . (defined('APP_VERSION') ? APP_VERSION : 'N/A') . "</p>";
?> 